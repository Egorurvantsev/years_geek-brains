from abc import ABC, abstractmethod
class Clothes:
    def __init__(self, v):
        self.v = v

    @abstractmethod
    def cloth(self, v):
        pass


class Coat(Clothes):
    def __init__(self, size):
        self.size = size


    def cloth(self, size):
        return size / 6.5 + 0.5

    @property
    def size(self):
        return self.__size

    @size.setter
    def size(self, size):
        if size < 20:
            self.__size = 20
        elif size > 70:
            self.__size = 70
        else:
            self__size = size


class Costume(Clothes):
    def __init__(self, v):
        self.v = v


    def cloth(self, v):
        return 2 * v + 0.3


c = Coat(7)
print(c.size)
f = Costume(50)
print(f'На пальто потребуется {c.cloth(7):.2f} м. ткани')
print(f'На костюм потребуется {f.cloth(50):.2f} м. ткани')
print(f'Всего потребуется {(c.cloth(50) + f.cloth(50)):.2f} м. ткани')